@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.base/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.base.scheduler
import org.eclipse.emf.ecore.EObject
import ru.neoflex.nfcore.base.types.Timestamp
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import ru.neoflex.nfcore.base.auth.Audit
import org.springframework.scheduling.TaskScheduler
import java.util.concurrent.ScheduledFuture

annotation "ru.neoflex.nfcore" as NFCore

type Exception wraps java.lang.Exception
type TaskScheduler wraps org.springframework.scheduling.TaskScheduler
type ScheduledFuture wraps java.util.concurrent.ScheduledFuture<?>
type Runnable wraps java.lang.Runnable
type BackOffPolicy wraps org.springframework.retry.backoff.BackOffPolicy
type RetryPolicy wraps org.springframework.retry.RetryPolicy
type Integer wraps java.lang.Integer
type Long wraps java.lang.Long
type Double wraps java.lang.Double

abstract class BackOffPolicyFactory {
	op BackOffPolicy createPolicy()
}

class NoBackOffPolicyFactory extends BackOffPolicyFactory {
}

class FixedBackOffPolicyFactory extends BackOffPolicyFactory {
    Long backOffPeriod
}

class ExponentialBackOffPolicyFactory extends BackOffPolicyFactory {
    Long initialInterval
    Double multiplier
    Long maxInterval
}

class ExponentialRandomBackOffPolicyFactory extends ExponentialBackOffPolicyFactory {
}

class UniformRandomBackOffPolicyFactory extends BackOffPolicyFactory {
    Long minBackOffPeriod
    Long maxBackOffPeriod
}

abstract class SchedulingPolicy {
	op ScheduledFuture schedule(TaskScheduler taskScheduler, Runnable runnable)
}

class OnceSchedulingPolicy extends SchedulingPolicy {
  Timestamp startTime
  boolean disableAfterRun
} 

class CronSchedulingPolicy extends SchedulingPolicy {
  String cronExpression
} 

class DelaySchedulingPolicy extends SchedulingPolicy {
  Timestamp startTime
  Long delay
} 

class PeriodSchedulingPolicy extends SchedulingPolicy {
  Timestamp startTime
  Long period
} 

abstract class RetryPolicyFactory {
	op RetryPolicy createPolicy()
}

class RetryableException {
    String exceptionClass
    boolean retryable
}

class SimpleRetryPolicyFactory extends RetryPolicyFactory {
    Integer maxAttempts
    contains RetryableException[] retryableExceptions
} 

class AlwaysRetryPolicyFactory extends RetryPolicyFactory {
} 

class NeverRetryPolicyFactory extends RetryPolicyFactory {
} 

class TimeoutRetryPolicyFactory extends RetryPolicyFactory {
    Long timeout
} 

class Parameter {
	String name
	String value
}

class ScheduledTask {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
    boolean enabled
    boolean transactional
    String branch
    refers EObject eObject
    contains Parameter[] parameters
    Text script
    contains SchedulingPolicy schedulingPolicy
    contains BackOffPolicyFactory backOffPolicyFactory
    contains RetryPolicyFactory retryPolicyFactory
    boolean imporsonate
    String runAsUser
    Password runAsPassword
    Timestamp lastScheduleTime
    Timestamp lastRunTime
    Text lastResult
    Timestamp lastErrorTime
    Text lastError
        @NFCore(documentation="Данные о создании и изменении объекта", disabled="true")
    contains Audit audit

    op Object refreshScheduler() throws Exception
    op Object debugRescheduleAll() throws Exception
    op Object debugExecute() throws Exception
}
