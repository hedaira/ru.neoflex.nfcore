@GenModel(
    bundleManifest="false",
    modelDirectory="ru.neoflex.nfcore.base/src/java/java-gen",
    complianceLevel="7.0",
    rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl",
    rootExtendsInterface="org.eclipse.emf.ecore.EObject"
)
package ru.neoflex.nfcore.base.auth
import org.eclipse.emf.ecore.EObject
import ru.neoflex.nfcore.base.tag.Tagged
import ru.neoflex.nfcore.base.types.Timestamp
import ru.neoflex.nfcore.base.types.QName
import ru.neoflex.nfcore.base.types.Text
import ru.neoflex.nfcore.base.types.Password
import org.eclipse.emf.ecore.util.EcoreUtil

annotation "ru.neoflex.nfcore" as NFCore

@NFCore(documentation="Данные о создании и изменении объекта")
class Audit {
        @NFCore(documentation="Автор созданного объекта")
    String createdBy
        @NFCore(documentation="Дата и время, когда был создан объект")
    Timestamp created
        @NFCore(documentation="Автор последнего изменения объекта")
    String modifiedBy
        @NFCore(documentation="Дата и время, когда был изменен объект в последный раз")
    Timestamp modified
}

@NFCore(documentation="Роль пользователя в приложении")
class Role extends Tagged {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Описание роли")
    Text description
        @NFCore(documentation="Права доступа роли")
    contains Permission[] grants opposite role
        @NFCore(documentation="Данные о создании и изменении объекта")
    contains Audit audit

        @NFCore(documentation="Функция проверки прав доступа пользователя к объекту. 0 - не установлено, 1 - чтение, 2 - чтение и запись, 4 - нет прав")
    op int isEObjectPermitted(EObject eObject) {
        var i = 0
        for (Permission grant: grants) {
            i = i.bitwiseOr(grant.isEObjectPermitted(eObject))
        }
        return i
    }
        @NFCore(documentation="Функция проверки прав доступа пользователя к ресурсу. 0 - не установлено, 1 - чтение, 2 - чтение и запись, 4 - нет прав")
    op int isResourcePermitted(String path) {
        var i = 0
        for (Permission grant: grants) {
            i = i.bitwiseOr(grant.isResourcePermitted(path))
        }
        return i
    }
}

@NFCore(documentation="Права доступа. 0 - не установлено, 1 - чтение, 2 - чтение и запись, 4 - нет прав")
enum GrantType {
    Unknown =0
    Read    =1
    Write   =2
    Denied  =4
}

@NFCore(documentation="Права доступа")
abstract class Permission {
        @NFCore(documentation="На какие роли распространяется")
    container Role role opposite grants
        @NFCore(documentation="")
    GrantType grantType
        @NFCore(documentation="Функция проверки прав доступа пользователя к объекту. 0 - не установлено, 1 - чтение, 2 - чтение и запись, 4 - нет прав")
    op int isEObjectPermitted(EObject eObject) {GrantType::UNKNOWN_VALUE}
        @NFCore(documentation="Функция проверки прав доступа пользователя к ресурсу. 0 - не установлено, 1 - чтение, 2 - чтение и запись, 4 - нет прав")
    op int isResourcePermitted(String path) {GrantType::UNKNOWN_VALUE}
}

@NFCore(documentation="Права все приложения")
class AllPermission extends Permission {
        @NFCore(documentation="Функция проверки прав доступа пользователя к объекту. 0 - не установлено, 1 - чтение, 2 - чтение и запись, 4 - нет прав")
    op int isEObjectPermitted(EObject eObject) {this.grantType.getValue()}
        @NFCore(documentation="Функция проверки прав доступа пользователя к ресурсу. 0 - не установлено, 1 - чтение, 2 - чтение и запись, 4 - нет прав")
    op int isResourcePermitted(String path) {this.grantType.getValue()}
}

@NFCore(documentation="Права на определенный объект")
class ObjectPermission extends Permission {
        @NFCore(documentation="Объект, который подчинается правилам")
    refers EObject eObject

        @NFCore(documentation="Функция проверки прав доступа пользователя к объекту. 0 - не установлено, 1 - чтение, 2 - чтение и запись, 4 - нет прав")
    op int isEObjectPermitted(EObject eObject) {
        if (getEObject() !== null && EcoreUtil.getURI(getEObject()).trimQuery() == EcoreUtil.getURI(eObject).trimQuery()) return this.grantType.getValue()
        else return GrantType::UNKNOWN_VALUE
    }
}

@NFCore(documentation="Ссылка на ресурс во внутренней файлово системе. Например: '/system/developer'")
class ApplicationResource {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
}

@NFCore(documentation="Права на определенный ресурс")
class ResourcePermission extends Permission {
        @NFCore(documentation="Ссылка на ресурс во внутренней файлово системе. Например: '/system/developer'")
    refers ApplicationResource Resource

        @NFCore(documentation="Функция проверки прав доступа пользователя к ресурсу. 0 - не установлено, 1 - чтение, 2 - чтение и запись, 4 - нет прав")
    op int isResourcePermitted(String path) {
        if (path.startsWith(getResource().name)) return this.grantType.getValue()
        else return GrantType::UNKNOWN_VALUE
    }
}

@NFCore(documentation="Полномочия")
abstract class Authority {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Описание")
    Text description
        @NFCore(documentation="Группа ролей")
    refers Role[] roles
        @NFCore(documentation="Данные о создании и изменении объекта")
    contains Audit audit
}

@NFCore(documentation="Проверка подлинности пароля")
abstract class Authenticator {
        @NFCore(documentation="Ссылка на пользователя этого пароля")
    refers User user opposite authenticators
        @NFCore(documentation="Запрет использования пароля")
    boolean disabled
}

@NFCore(documentation="Зашифрованный пароль")
class PasswordAuthenticator extends Authenticator {
        @NFCore(documentation="Пароль")
    Password password
}

@NFCore(documentation="Пользователь")
class User extends Authority {
        @NFCore(documentation="email пользователя")
    String email
        @NFCore(documentation="Контейнер для паролей пользователя")
    contains Authenticator[] authenticators opposite user
        @NFCore(documentation="Группы, в которые включен пользователь")
    refers Group[] groups
}

@NFCore(documentation="Группа с определенными правами доступа")
class Group extends Authority {
}

// User Profile (to save ui settings)
@NFCore(internal="true", documentation="Пользовательский профиль - в нём хранится информация о текущих параметрах выбранных пользователем (аналог cookies)")
class UserProfile {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Имя пользователя")
    String userName
        @NFCore(documentation="Параметры, к виде JSON приведенного к строке")
    contains Parameter[] params
}

@NFCore(documentation="Пара ключ - значение для UserProfile")
class Parameter {
    String key
    String value
}

@NFCore(internal="true", documentation="Экземпляр класса, взятый раз редактирование, на текущий момент")
class CurrentLock {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Название заблокированного объекта")
    String objectName
        @NFCore(documentation="Данные о создании и изменении объекта")
    contains Audit audit
}

@NFCore(internal="true", documentation="История радактирования экземпляра класса. Сейчас не используется")
class EditHistory {
        @NFCore(documentation="Уникальное имя объекта во всем приложении")
    QName name
        @NFCore(documentation="Класс объекта")
    String EClass
        @NFCore(documentation="Название заблокированного объекта")
    String objectName
        @NFCore(documentation="id объекта")
    String objectId
        @NFCore(documentation="Старая ревизия объекта")
    String oldRev
        @NFCore(documentation="Новая ревизия объекта")
    String newRev
        @NFCore(documentation="Данные о создании и изменении объекта")
    contains Audit audit
}
